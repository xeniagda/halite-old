let zipWith = \f la lb.
            match la {
                Empty -> Empty;
                Cons a b ->
                    match lb {
                        Empty -> Empty;
                        Cons c d -> Cons (f a c) (zipWith f b d);
                    };
            };

    tail = \lst.
        match lst {
            Cons a b -> b;
            Empty -> !;
        };

    fibs = Cons 0 (Cons 1 (zipWith add fibs (tail fibs)));

    take = \n lst.
        match n {
            0 -> Empty;
            _ ->
                match lst {
                    Cons a b -> Cons a (take (sub n 1) b);
                };
        };


in take 50 fibs
