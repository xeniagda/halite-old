let filter = \f lst.
        match lst {
            Cons a b ->
                match f a {
                    True -> Cons a (filter f b);
                    False -> filter f b;
                };
            Empty -> Empty;
        };

    take = \n lst.
        match n {
            0 -> Empty;
            _ -> match lst {
                Cons a b -> Cons a (take (sub n 1) b);
            }
        };

    oddNumbersAfter = \n. Cons n (oddNumbersAfter (add n 2));

    filterPrime = \lst.
        match lst {
            Cons prime rest ->
                let nondivisible = filter (\n. neq (mod n prime) 0) rest
                in Cons prime (filterPrime nondivisible)
        };

    primes = Cons 2 (filterPrime (oddNumbersAfter 3));

in take 20 primes
